
Chapter 3: Mastering Requirements Engineering

Introduction to Requirements Engineering

Requirements gathering and analysis is the foundation of a successful software project. It ensures the system delivers real business value by connecting business goals with technical implementation.

Key Concepts
- Requirements Engineering: Structured discipline to establish, document, and manage software requirements.
- Requirements Elicitation: Systematic gathering and validation of requirements.
- Stakeholder Analysis: Identifying everyone involved or impacted.
- Requirements Classification: Grouping and organizing requirements logically.

The Critical Role of Stakeholders

Stakeholders shape the project’s goals and constraints. Engaging them early ensures the software meets actual needs.

Types of Stakeholders
- Primary: End users, business owners, product managers
- Secondary: Regulatory bodies, support teams, marketing teams
- Technical: Developers, architects, QA engineers

Stakeholder Management Strategies
- Stakeholder mapping (influence vs. interest)
- Clear communication channels
- Regular feedback loops
- Managing conflicting needs through prioritization
- Documenting roles and responsibilities

Business Rules vs. Business Requirements

Business Rules
- Operational rules and policies defined formally:
- IF-THEN, WHEN, ONLY IF logic

Examples:
- IF a cart value exceeds $100, THEN apply free shipping.
- ONLY IF a practitioner has valid credentials, can they prescribe medication.

Business Requirements
- High-level business needs and success criteria

Example:
- Increase online sales conversion by 15%

External Interface Requirements

These define how the system connects with external systems, users, or hardware.

Types of Interfaces
- User Interfaces (UI): GUI, CLI, Voice UI
- Hardware Interfaces: Printers, sensors
- Software Interfaces: APIs, databases
- Communication Interfaces: Network protocols, wireless technologies

Example:
Healthcare app integration:
- HL7/FHIR compliance
- OAuth 2.0 secure login
- Bluetooth device syncing

Functional Requirements

Define the system’s specific behaviors and services.

Categories:
- Authentication & Authorization: Login, role-based access
- Business Processes: Order processing, approvals
- Data Management: Data storage, reporting
- System Interactions: APIs, real-time notifications

Examples:
- The system shall allow users to reset their password via email.
- The dashboard shall display real-time inventory levels.

Non-Functional Requirements (NFRs)

Define how well the system performs (quality attributes).

Categories:
- Performance: Response time, throughput
- Reliability: Uptime %, recovery time
- Security: Encryption, compliance (e.g., GDPR)
- Usability: Accessibility, UI standards
- Maintainability: Documentation, modular design

Examples:
- Support 10,000 concurrent users with <2 sec response.
- Encrypt all stored data using AES-256.

Constraint Requirements

Constraints are limitations the system must operate within.

Types:
- Technical: Specific tech stacks or architecture
- Business: Budget, deadlines
- Regulatory: Compliance with laws (e.g., HIPAA)

Examples:
- Must use open-source technologies approved by IT department.
- Data processing restricted to EU servers.

Requirements Elicitation Techniques

Methods:
- Interviews
- Workshops
- Observation
- Prototyping
- Document Analysis
- Surveys

Best Practices:
- Use multiple methods
- Engage diverse stakeholder groups
- Validate assumptions early

Requirements Analysis and Specification

Key Activities:
- Classification and categorization
- Prioritization (e.g., MoSCoW method)
- Conflict resolution
- Feasibility studies
- Writing traceable, verifiable requirements

Requirements Validation and Verification

Techniques:
- Requirements review
- Prototype validation
- Traceability matrix
- Formal inspections

Common Pitfalls:
- Scope creep
- Gold plating
- Ambiguous language
- Ignoring constraints

Requirements Management Tools

Tool Types:
- Enterprise: IBM DOORS, Jama Connect
- Agile: JIRA, Azure DevOps
- Collaboration: Confluence, SharePoint
- Modeling: Enterprise Architect, Lucidchart

Business Analyst Role

Responsibilities:
- Eliciting requirements
- Modeling processes (BPMN, UML)
- Validating designs
- Supporting testing

Deliverables:
- BRD
- FRS
- Use case models
- Traceability matrices

Case Study: E-Commerce Platform

Goals:
- +40% online orders
- -25% customer inquiries

Functional:
- Bulk ordering, real-time inventory sync

Non-Functional:
- 99.9% uptime, PCI-DSS compliance

Constraints:
- Use SAP data, mobile-first design

Lessons Learned:
- Early warehouse team involvement was critical
- Regular priority reviews helped focus

Emerging Trends in Requirements Engineering

- AI-assisted requirement gathering
- Model-Based Systems Engineering (MBSE)
- Continuous Requirements Updates
- Blockchain for Audit Trails
- VR/AR for Requirements Visualization

Conclusion

Strong requirements engineering practices:
- Reduce project risk
- Improve product quality
- Increase stakeholder satisfaction

Mastering requirements gathering, analysis, and management offers organizations a huge advantage in delivering successful software projects.
