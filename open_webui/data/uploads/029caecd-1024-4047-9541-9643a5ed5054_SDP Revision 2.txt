
SDP Chapter 2 Revision: Agile and DevOps Models
Software Development Practices

Agile Model Overview

The Agile model emphasizes flexibility, collaboration, and continuous delivery. It combines iterative and incremental development, with a strong focus on customer satisfaction and quick delivery of working software.

Key Characteristics:
- Iterative Development: Delivered in small cycles (sprints)
- Customer-Centric: Regular feedback from stakeholders
- Adaptive Planning: Flexible to evolving requirements
- Cross-Functional Teams: Developers, testers, analysts collaborate
- Working Software Priority: Minimal documentation, rapid results

Advantages of Agile:
1. Easier progress tracking via short sprints
2. High adaptability to requirement changes
3. Promotes frequent delivery and feedback
4. Less documentation overhead
5. Real-world development alignment
6. Parallel development and delivery possible

Disadvantages of Agile:
1. May not align with traditional ops teams
2. Requires team training and experience
3. Dependent on consistent customer input
4. Organizational resistance to change
5. Risks from minimal documentation
6. Less predictability in budget/timeline

DevOps Model Overview

DevOps is a cultural and technical movement that integrates software development (Dev) and operations (Ops) to enable continuous delivery and faster, more reliable product releases.

DevOps Life Cycle (7 Stages):
1. Continuous Development
2. Continuous Integration
3. Continuous Testing
4. Continuous Monitoring
5. Continuous Feedback
6. Continuous Deployment
7. Continuous Operations

Advantages of DevOps:
1. Accelerates software delivery cycles
2. Increases system stability and reliability
3. Improves inter-team collaboration
4. Focuses on innovation over maintenance
5. Automation reduces manual errors

Disadvantages of DevOps:
1. Lack of experienced DevOps engineers
2. High tool and infrastructure investment
3. Hard to shift culture in large organizations
4. Learning curve for toolchains and CI/CD setups
5. Risk of security misconfigurations

Comparative Summary: Waterfall vs. Agile vs. DevOps

Category             | Waterfall       | Agile           | DevOps
---------------------|------------------|------------------|--------------------
Approach             | Linear           | Iterative        | Continuous
Flexibility          | Low              | High             | Medium
Customer Involvement | Minimal          | Ongoing          | Continuous
Documentation        | Formal           | Lightweight      | Auto-generated
Testing              | Last stage       | Built-in         | Automated
Delivery             | Single release   | Incremental      | Frequent/rolling

Tools by Methodology

Waterfall Tools:
- Wrike – Gantt-based project management
- Project Manager – Task planning
- Smartsheet – Spreadsheet-style tracking

Agile Tools:
- JIRA, Trello – Sprint and backlog management
- Agilo, Kanban – Visual task management
- GitHub – Source code collaboration

DevOps Tools:
- Git, Jenkins, Ansible – CI/CD
- Docker, Kubernetes – Containerization
- Chef, Puppet – Infrastructure automation
- Nagios, Prometheus – Monitoring and alerting

Practical Use Cases

Use Waterfall If:
- Requirements are well-defined
- Regulatory documentation is mandatory
- Project scope is small or fixed

Use Agile If:
- Frequent user feedback is needed
- Features evolve during development
- High adaptability is crucial

Use DevOps If:
- Product requires frequent updates
- System uptime is business-critical
- Cloud or SaaS-based delivery is planned

Transitioning & Implementation Tips

Moving to Agile:
- Involve stakeholders early
- Provide team training and workshops
- Start with pilot agile projects

Introducing DevOps:
- Invest in automation tools
- Foster Dev + Ops collaboration culture
- Begin with CI/CD implementation

Future Trends

1. Agile + DevOps Integration: Unified pipelines
2. AI in DevOps: Predictive automation
3. Value Stream Management
4. Serverless Architecture
5. Scaled Agile (SAFe)
